name: Ansible-Tower

on:
  workflow_dispatch:
    inputs:
      # directory:
      #   description: 'Select the directory to run Terraform'
      #   required: true
      #   default: 'terraform'

      actions:
        description: 'Choose Terraform action (plan/apply/destroy)'
        required: true
        default: 'plan'
        type: choice
        options:
          - 'plan'
          - 'apply'
          - 'destroy'

      show_sensitive_output:
        description: 'Show sensitive output (for apply only)'
        required: false
        default: 'false'

permissions:
  contents: write

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    # env:
    #   sensitive_output: ${{ github.event.inputs.show_sensitive_output }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.9.4
        terraform_wrapper: false

    - name: Terraform Plan
      if: github.event.inputs.actions == 'plan'
      working-directory: ${{ env.DIRECTORY }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd terraform
        terraform init -backend-config=env/${{ github.ref_name }}/backend.conf
        terraform fmt
        terraform plan -var-file=env/${{ github.ref_name }}/variables.tfvars -var-file=shared.tfvars

    - name: Terraform Apply
      if: ${{ (github.event.inputs.actions == 'apply') && (github.event.inputs.show_sensitive_output) }}
      working-directory: ${{ env.DIRECTORY }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd terraform
        ls -la
        terraform init -backend-config=env/${{ github.ref_name }}/backend.conf
        terraform fmt
        terraform apply -auto-approve -var-file=env/${{ github.ref_name }}/variables.tfvars -var-file=shared.tfvars
        echo "Sensitive output: ${{ github.event.inputs.show_sensitive_output }}"

    - name: Terraform Apply Backend and Output
      if: ${{ (github.event.inputs.actions == 'apply') && (github.event.inputs.show_sensitive_output) && (github.event.inputs.directory == '4_backend') }}
      working-directory: ${{ env.DIRECTORY }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd terraform
        terraform init -backend-config=${{ github.ref_name }}/backend.conf
        terraform fmt
        terraform apply -auto-approve -var-file=env/${{ github.ref_name }}/variables.tfvars -var-file=shared.tfvars
        echo "Sensitive output: ${{ github.event.inputs.show_sensitive_output }}"
        echo "__________________"
        terraform output -raw ansible_master_pemkey
        echo "__________________"
        terraform output -raw ansible_slave_pemkey
        echo "__________________"


    - name: Terraform Destroy
      if: github.event.inputs.actions == 'destroy'
      working-directory: ${{ env.DIRECTORY }}
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd terraform
        terraform init -backend-config=env/${{ github.ref_name }}/backend.conf
        terraform destroy -auto-approve -var-file=env/${{ github.ref_name }}/variables.tfvars -var-file=shared.tfvars